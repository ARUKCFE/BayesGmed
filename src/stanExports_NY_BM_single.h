// Generated by rstantools.  Do not edit by hand.

/*
    BayesGmed is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BayesGmed is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BayesGmed.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_NY_BM_single_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_NY_BM_single");
    reader.add_event(91, 89, "end", "model_NY_BM_single");
    return reader;
}
#include <stan_meta_header.hpp>
class model_NY_BM_single
  : public stan::model::model_base_crtp<model_NY_BM_single> {
private:
        int N;
        int P;
        matrix_d X;
        vector_d A;
        std::vector<int> M;
        vector_d Y;
        vector_d location_y;
        vector_d location_m;
        matrix_d scale_y;
        matrix_d scale_m;
        vector_d boot_probs;
        vector_d Mv;
public:
    model_NY_BM_single(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_NY_BM_single(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_NY_BM_single_namespace::model_NY_BM_single";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];
            check_greater_or_equal(function__, "P", P, 0);
            current_statement_begin__ = 7;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "P", P);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,P));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, P);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = P;
            size_t X_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("A", "N", N);
            context__.validate_dims("data initialization", "A", "vector_d", context__.to_vec(N));
            A = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("A");
            pos__ = 0;
            size_t A_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                A(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("M", "N", N);
            context__.validate_dims("data initialization", "M", "int", context__.to_vec(N));
            M = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            size_t M_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < M_k_0_max__; ++k_0__) {
                M[k_0__] = vals_i__[pos__++];
            }
            size_t M_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < M_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "M[i_0__]", M[i_0__], 0);
                check_less_or_equal(function__, "M[i_0__]", M[i_0__], 1);
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("Y", "N", N);
            context__.validate_dims("data initialization", "Y", "vector_d", context__.to_vec(N));
            Y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("Y");
            pos__ = 0;
            size_t Y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < Y_j_1_max__; ++j_1__) {
                Y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("location_y", "(P + 2)", (P + 2));
            context__.validate_dims("data initialization", "location_y", "vector_d", context__.to_vec((P + 2)));
            location_y = Eigen::Matrix<double, Eigen::Dynamic, 1>((P + 2));
            vals_r__ = context__.vals_r("location_y");
            pos__ = 0;
            size_t location_y_j_1_max__ = (P + 2);
            for (size_t j_1__ = 0; j_1__ < location_y_j_1_max__; ++j_1__) {
                location_y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("location_m", "(P + 1)", (P + 1));
            context__.validate_dims("data initialization", "location_m", "vector_d", context__.to_vec((P + 1)));
            location_m = Eigen::Matrix<double, Eigen::Dynamic, 1>((P + 1));
            vals_r__ = context__.vals_r("location_m");
            pos__ = 0;
            size_t location_m_j_1_max__ = (P + 1);
            for (size_t j_1__ = 0; j_1__ < location_m_j_1_max__; ++j_1__) {
                location_m(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("scale_y", "(P + 2)", (P + 2));
            validate_non_negative_index("scale_y", "(P + 2)", (P + 2));
            context__.validate_dims("data initialization", "scale_y", "matrix_d", context__.to_vec((P + 2),(P + 2)));
            scale_y = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((P + 2), (P + 2));
            vals_r__ = context__.vals_r("scale_y");
            pos__ = 0;
            size_t scale_y_j_2_max__ = (P + 2);
            size_t scale_y_j_1_max__ = (P + 2);
            for (size_t j_2__ = 0; j_2__ < scale_y_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < scale_y_j_1_max__; ++j_1__) {
                    scale_y(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            stan::math::check_cov_matrix(function__, "scale_y", scale_y);
            current_statement_begin__ = 19;
            validate_non_negative_index("scale_m", "(P + 1)", (P + 1));
            validate_non_negative_index("scale_m", "(P + 1)", (P + 1));
            context__.validate_dims("data initialization", "scale_m", "matrix_d", context__.to_vec((P + 1),(P + 1)));
            scale_m = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((P + 1), (P + 1));
            vals_r__ = context__.vals_r("scale_m");
            pos__ = 0;
            size_t scale_m_j_2_max__ = (P + 1);
            size_t scale_m_j_1_max__ = (P + 1);
            for (size_t j_2__ = 0; j_2__ < scale_m_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < scale_m_j_1_max__; ++j_1__) {
                    scale_m(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            stan::math::check_cov_matrix(function__, "scale_m", scale_m);
            // initialize transformed data variables
            current_statement_begin__ = 23;
            validate_non_negative_index("boot_probs", "N", N);
            boot_probs = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            stan::math::fill(boot_probs, DUMMY_VAR__);
            stan::math::assign(boot_probs,rep_vector((1.0 / N), N));
            current_statement_begin__ = 25;
            validate_non_negative_index("Mv", "N", N);
            Mv = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            stan::math::fill(Mv, DUMMY_VAR__);
            stan::math::assign(Mv,to_vector(M));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 29;
            validate_non_negative_index("alpha", "(P + 2)", (P + 2));
            num_params_r__ += (P + 2);
            current_statement_begin__ = 31;
            validate_non_negative_index("beta", "(P + 1)", (P + 1));
            num_params_r__ += (P + 1);
            current_statement_begin__ = 33;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_NY_BM_single() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 29;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "(P + 2)", (P + 2));
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec((P + 2)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha((P + 2));
        size_t alpha_j_1_max__ = (P + 2);
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 31;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "(P + 1)", (P + 1));
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec((P + 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta((P + 1));
        size_t beta_j_1_max__ = (P + 1);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 33;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 29;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_constrain((P + 2), lp__);
            else
                alpha = in__.vector_constrain((P + 2));
            current_statement_begin__ = 31;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain((P + 1), lp__);
            else
                beta = in__.vector_constrain((P + 1));
            current_statement_begin__ = 33;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 38;
            validate_non_negative_index("betaZ", "P", P);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> betaZ(P);
            stan::math::initialize(betaZ, DUMMY_VAR__);
            stan::math::fill(betaZ, DUMMY_VAR__);
            stan::math::assign(betaZ,head(beta, P));
            current_statement_begin__ = 39;
            local_scalar_t__ betaA;
            (void) betaA;  // dummy to suppress unused var warning
            stan::math::initialize(betaA, DUMMY_VAR__);
            stan::math::fill(betaA, DUMMY_VAR__);
            stan::math::assign(betaA,get_base1(beta, (P + 1), "beta", 1));
            current_statement_begin__ = 41;
            validate_non_negative_index("alphaZ", "P", P);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alphaZ(P);
            stan::math::initialize(alphaZ, DUMMY_VAR__);
            stan::math::fill(alphaZ, DUMMY_VAR__);
            stan::math::assign(alphaZ,head(alpha, P));
            current_statement_begin__ = 42;
            local_scalar_t__ alphaA;
            (void) alphaA;  // dummy to suppress unused var warning
            stan::math::initialize(alphaA, DUMMY_VAR__);
            stan::math::fill(alphaA, DUMMY_VAR__);
            stan::math::assign(alphaA,get_base1(alpha, (P + 1), "alpha", 1));
            current_statement_begin__ = 43;
            local_scalar_t__ alphaM;
            (void) alphaM;  // dummy to suppress unused var warning
            stan::math::initialize(alphaM, DUMMY_VAR__);
            stan::math::fill(alphaM, DUMMY_VAR__);
            stan::math::assign(alphaM,get_base1(alpha, (P + 2), "alpha", 1));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 38;
            size_t betaZ_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < betaZ_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(betaZ(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: betaZ" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable betaZ: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 39;
            if (stan::math::is_uninitialized(betaA)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: betaA";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable betaA: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 41;
            size_t alphaZ_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < alphaZ_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(alphaZ(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: alphaZ" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable alphaZ: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 42;
            if (stan::math::is_uninitialized(alphaA)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: alphaA";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable alphaA: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 43;
            if (stan::math::is_uninitialized(alphaM)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: alphaM";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable alphaM: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            // model body
            current_statement_begin__ = 47;
            lp_accum__.add(multi_normal_log<propto__>(alpha, location_y, scale_y));
            current_statement_begin__ = 48;
            lp_accum__.add(multi_normal_log<propto__>(beta, location_m, scale_m));
            current_statement_begin__ = 50;
            lp_accum__.add((student_t_log(sigma, 3, 0, 10) - (1 * student_t_ccdf_log(0, 3, 0, 10))));
            current_statement_begin__ = 52;
            lp_accum__.add(bernoulli_logit_log<propto__>(M, add(multiply(X, betaZ), multiply(A, betaA))));
            current_statement_begin__ = 53;
            lp_accum__.add(normal_log<propto__>(Y, add(add(multiply(X, alphaZ), multiply(A, alphaA)), multiply(Mv, alphaM)), sigma));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("beta");
        names__.push_back("sigma");
        names__.push_back("betaZ");
        names__.push_back("betaA");
        names__.push_back("alphaZ");
        names__.push_back("alphaA");
        names__.push_back("alphaM");
        names__.push_back("row_i");
        names__.push_back("NDE1");
        names__.push_back("NDE2");
        names__.push_back("NIE1");
        names__.push_back("NIE2");
        names__.push_back("M_a0");
        names__.push_back("M_a1");
        names__.push_back("Y_a1Ma0");
        names__.push_back("Y_a0Ma0");
        names__.push_back("Y_a1Ma1");
        names__.push_back("Y_a0Ma1");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((P + 2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((P + 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_NY_BM_single_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_constrain((P + 2));
        size_t alpha_j_1_max__ = (P + 2);
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain((P + 1));
        size_t beta_j_1_max__ = (P + 1);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 38;
            validate_non_negative_index("betaZ", "P", P);
            Eigen::Matrix<double, Eigen::Dynamic, 1> betaZ(P);
            stan::math::initialize(betaZ, DUMMY_VAR__);
            stan::math::fill(betaZ, DUMMY_VAR__);
            stan::math::assign(betaZ,head(beta, P));
            current_statement_begin__ = 39;
            double betaA;
            (void) betaA;  // dummy to suppress unused var warning
            stan::math::initialize(betaA, DUMMY_VAR__);
            stan::math::fill(betaA, DUMMY_VAR__);
            stan::math::assign(betaA,get_base1(beta, (P + 1), "beta", 1));
            current_statement_begin__ = 41;
            validate_non_negative_index("alphaZ", "P", P);
            Eigen::Matrix<double, Eigen::Dynamic, 1> alphaZ(P);
            stan::math::initialize(alphaZ, DUMMY_VAR__);
            stan::math::fill(alphaZ, DUMMY_VAR__);
            stan::math::assign(alphaZ,head(alpha, P));
            current_statement_begin__ = 42;
            double alphaA;
            (void) alphaA;  // dummy to suppress unused var warning
            stan::math::initialize(alphaA, DUMMY_VAR__);
            stan::math::fill(alphaA, DUMMY_VAR__);
            stan::math::assign(alphaA,get_base1(alpha, (P + 1), "alpha", 1));
            current_statement_begin__ = 43;
            double alphaM;
            (void) alphaM;  // dummy to suppress unused var warning
            stan::math::initialize(alphaM, DUMMY_VAR__);
            stan::math::fill(alphaM, DUMMY_VAR__);
            stan::math::assign(alphaM,get_base1(alpha, (P + 2), "alpha", 1));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t betaZ_j_1_max__ = P;
                for (size_t j_1__ = 0; j_1__ < betaZ_j_1_max__; ++j_1__) {
                    vars__.push_back(betaZ(j_1__));
                }
                vars__.push_back(betaA);
                size_t alphaZ_j_1_max__ = P;
                for (size_t j_1__ = 0; j_1__ < alphaZ_j_1_max__; ++j_1__) {
                    vars__.push_back(alphaZ(j_1__));
                }
                vars__.push_back(alphaA);
                vars__.push_back(alphaM);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 57;
            int row_i;
            (void) row_i;  // dummy to suppress unused var warning
            stan::math::fill(row_i, std::numeric_limits<int>::min());
            current_statement_begin__ = 59;
            double NDE1;
            (void) NDE1;  // dummy to suppress unused var warning
            stan::math::initialize(NDE1, DUMMY_VAR__);
            stan::math::fill(NDE1, DUMMY_VAR__);
            stan::math::assign(NDE1,0);
            current_statement_begin__ = 60;
            double NDE2;
            (void) NDE2;  // dummy to suppress unused var warning
            stan::math::initialize(NDE2, DUMMY_VAR__);
            stan::math::fill(NDE2, DUMMY_VAR__);
            stan::math::assign(NDE2,0);
            current_statement_begin__ = 61;
            double NIE1;
            (void) NIE1;  // dummy to suppress unused var warning
            stan::math::initialize(NIE1, DUMMY_VAR__);
            stan::math::fill(NIE1, DUMMY_VAR__);
            stan::math::assign(NIE1,0);
            current_statement_begin__ = 62;
            double NIE2;
            (void) NIE2;  // dummy to suppress unused var warning
            stan::math::initialize(NIE2, DUMMY_VAR__);
            stan::math::fill(NIE2, DUMMY_VAR__);
            stan::math::assign(NIE2,0);
            current_statement_begin__ = 63;
            validate_non_negative_index("M_a0", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> M_a0(N);
            stan::math::initialize(M_a0, DUMMY_VAR__);
            stan::math::fill(M_a0, DUMMY_VAR__);
            current_statement_begin__ = 64;
            validate_non_negative_index("M_a1", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> M_a1(N);
            stan::math::initialize(M_a1, DUMMY_VAR__);
            stan::math::fill(M_a1, DUMMY_VAR__);
            current_statement_begin__ = 65;
            validate_non_negative_index("Y_a1Ma0", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> Y_a1Ma0(N);
            stan::math::initialize(Y_a1Ma0, DUMMY_VAR__);
            stan::math::fill(Y_a1Ma0, DUMMY_VAR__);
            current_statement_begin__ = 66;
            validate_non_negative_index("Y_a0Ma0", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> Y_a0Ma0(N);
            stan::math::initialize(Y_a0Ma0, DUMMY_VAR__);
            stan::math::fill(Y_a0Ma0, DUMMY_VAR__);
            current_statement_begin__ = 67;
            validate_non_negative_index("Y_a1Ma1", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> Y_a1Ma1(N);
            stan::math::initialize(Y_a1Ma1, DUMMY_VAR__);
            stan::math::fill(Y_a1Ma1, DUMMY_VAR__);
            current_statement_begin__ = 68;
            validate_non_negative_index("Y_a0Ma1", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> Y_a0Ma1(N);
            stan::math::initialize(Y_a0Ma1, DUMMY_VAR__);
            stan::math::fill(Y_a0Ma1, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 69;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 71;
                stan::math::assign(row_i, categorical_rng(boot_probs, base_rng__));
                current_statement_begin__ = 73;
                stan::model::assign(M_a0, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            bernoulli_logit_rng(multiply(get_base1(X, row_i, "X", 1), betaZ), base_rng__), 
                            "assigning variable M_a0");
                current_statement_begin__ = 75;
                stan::model::assign(M_a1, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            bernoulli_logit_rng((multiply(get_base1(X, row_i, "X", 1), betaZ) + betaA), base_rng__), 
                            "assigning variable M_a1");
                current_statement_begin__ = 77;
                stan::model::assign(Y_a1Ma0, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            normal_rng(((multiply(get_base1(X, row_i, "X", 1), alphaZ) + (get_base1(M_a0, n, "M_a0", 1) * alphaM)) + alphaA), sigma, base_rng__), 
                            "assigning variable Y_a1Ma0");
                current_statement_begin__ = 78;
                stan::model::assign(Y_a0Ma0, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            normal_rng((multiply(get_base1(X, row_i, "X", 1), alphaZ) + (get_base1(M_a0, n, "M_a0", 1) * alphaM)), sigma, base_rng__), 
                            "assigning variable Y_a0Ma0");
                current_statement_begin__ = 80;
                stan::model::assign(Y_a1Ma1, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            normal_rng(((multiply(get_base1(X, row_i, "X", 1), alphaZ) + (get_base1(M_a1, n, "M_a1", 1) * alphaM)) + alphaA), sigma, base_rng__), 
                            "assigning variable Y_a1Ma1");
                current_statement_begin__ = 81;
                stan::model::assign(Y_a0Ma1, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            normal_rng((multiply(get_base1(X, row_i, "X", 1), alphaZ) + (get_base1(M_a1, n, "M_a1", 1) * alphaM)), sigma, base_rng__), 
                            "assigning variable Y_a0Ma1");
                current_statement_begin__ = 83;
                stan::math::assign(NDE1, (NDE1 + ((get_base1(Y_a1Ma0, n, "Y_a1Ma0", 1) - get_base1(Y_a0Ma0, n, "Y_a0Ma0", 1)) / N)));
                current_statement_begin__ = 84;
                stan::math::assign(NDE2, (NDE2 + ((get_base1(Y_a1Ma1, n, "Y_a1Ma1", 1) - get_base1(Y_a0Ma1, n, "Y_a0Ma1", 1)) / N)));
                current_statement_begin__ = 86;
                stan::math::assign(NIE1, (NIE1 + ((get_base1(Y_a1Ma1, n, "Y_a1Ma1", 1) - get_base1(Y_a1Ma0, n, "Y_a1Ma0", 1)) / N)));
                current_statement_begin__ = 87;
                stan::math::assign(NIE2, (NIE2 + ((get_base1(Y_a0Ma1, n, "Y_a0Ma1", 1) - get_base1(Y_a0Ma0, n, "Y_a0Ma0", 1)) / N)));
            }
            // validate, write generated quantities
            current_statement_begin__ = 57;
            vars__.push_back(row_i);
            current_statement_begin__ = 59;
            vars__.push_back(NDE1);
            current_statement_begin__ = 60;
            vars__.push_back(NDE2);
            current_statement_begin__ = 61;
            vars__.push_back(NIE1);
            current_statement_begin__ = 62;
            vars__.push_back(NIE2);
            current_statement_begin__ = 63;
            size_t M_a0_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < M_a0_j_1_max__; ++j_1__) {
                vars__.push_back(M_a0(j_1__));
            }
            current_statement_begin__ = 64;
            size_t M_a1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < M_a1_j_1_max__; ++j_1__) {
                vars__.push_back(M_a1(j_1__));
            }
            current_statement_begin__ = 65;
            size_t Y_a1Ma0_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < Y_a1Ma0_j_1_max__; ++j_1__) {
                vars__.push_back(Y_a1Ma0(j_1__));
            }
            current_statement_begin__ = 66;
            size_t Y_a0Ma0_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < Y_a0Ma0_j_1_max__; ++j_1__) {
                vars__.push_back(Y_a0Ma0(j_1__));
            }
            current_statement_begin__ = 67;
            size_t Y_a1Ma1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < Y_a1Ma1_j_1_max__; ++j_1__) {
                vars__.push_back(Y_a1Ma1(j_1__));
            }
            current_statement_begin__ = 68;
            size_t Y_a0Ma1_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < Y_a0Ma1_j_1_max__; ++j_1__) {
                vars__.push_back(Y_a0Ma1(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_NY_BM_single";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = (P + 2);
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = (P + 1);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t betaZ_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < betaZ_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "betaZ" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "betaA";
            param_names__.push_back(param_name_stream__.str());
            size_t alphaZ_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < alphaZ_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alphaZ" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "alphaA";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "alphaM";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "row_i";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "NDE1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "NDE2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "NIE1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "NIE2";
        param_names__.push_back(param_name_stream__.str());
        size_t M_a0_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < M_a0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "M_a0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t M_a1_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < M_a1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "M_a1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Y_a1Ma0_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Y_a1Ma0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Y_a1Ma0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Y_a0Ma0_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Y_a0Ma0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Y_a0Ma0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Y_a1Ma1_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Y_a1Ma1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Y_a1Ma1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Y_a0Ma1_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Y_a0Ma1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Y_a0Ma1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = (P + 2);
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = (P + 1);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t betaZ_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < betaZ_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "betaZ" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "betaA";
            param_names__.push_back(param_name_stream__.str());
            size_t alphaZ_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < alphaZ_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alphaZ" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "alphaA";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "alphaM";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "row_i";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "NDE1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "NDE2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "NIE1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "NIE2";
        param_names__.push_back(param_name_stream__.str());
        size_t M_a0_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < M_a0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "M_a0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t M_a1_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < M_a1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "M_a1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Y_a1Ma0_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Y_a1Ma0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Y_a1Ma0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Y_a0Ma0_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Y_a0Ma0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Y_a0Ma0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Y_a1Ma1_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Y_a1Ma1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Y_a1Ma1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Y_a0Ma1_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < Y_a0Ma1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Y_a0Ma1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_NY_BM_single_namespace::model_NY_BM_single stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
